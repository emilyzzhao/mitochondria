---
header-includes:
  - \usepackage{titling}
  - \pretitle{\vspace{-1.77cm}\begin{center}\Large}
  - \posttitle{\end{center}}
title: |
  | dPsi Non-Linear Analysis
author: "Joy Bao-Dai, Aimi Wen, Emily Zhao"
geometry: "left=2cm,right=2cm,top=2cm,bottom=2cm"
fontsize: 11pt
date: "2024-04-03"
output:
  pdf_document:
    includes:
      in_header: header.tex
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = TRUE, message = TRUE, echo = TRUE)
```

```{r}

library(tidyverse)
library(data.table)
library(ggplot2)
library(purrr)
library(dplyr)
library(nlme)
library(broom)
library(kableExtra)

```

```{r}
#load("~/projects/mitochondria/data/metabolicAssay.RData")
load("data/metabolicAssay.RData")
dPsi <- dPsi[dPsi$dose != -12.95, ]

dPsi <- dPsi[!is.na(dPsi$y), ]
dPsi$dose <- as.numeric(dPsi$dose)

dPsi$pair <- as.factor(dPsi$pair)

dPsi$sub_geno <- interaction(dPsi$substrate, dPsi$geno)

dPsi_GM <- subset(dPsi, substrate == "GM")

```

```{r}

g <- ggplot(data = dPsi_GM, aes(x = dose, y = y)) + geom_point()
g

```

```{r}

fit0 <- nls(y ~ SSmicmen(dose, Vm, K), data = dPsi)

fit1 <- nls(y ~ SSmicmen(dose, Vm, K), data = dPsi_GM)

g + stat_function(fun = SSmicmen, args = list(Vm = tidy(fit1)$estimate[1],
                                       K=tidy(fit1)$estimate[2]), 
                  colour = "darkgreen")+
      ggtitle("Fitted Michaelis-Menten Model Against GM Substrate Data")

```

```{r}

fit1b <- nls(y ~ SSasymp(dose, init, m, plateau), data = dPsi_GM)


# g + stat_function(fun = SSasymp, args = list(init = tidy(fit2)$estimate[1],
#                                        m=tidy(fit2)$estimate[2], plateau=tidy(fit2)$estimate[3]),
#                   colour = "darkgreen")

# Assuming your independent variable is named 'x'
# x_vals <- seq(min(dPsi_GM$dose), max(dPsi_GM$dose), length.out = 60)
x_vals <- c(rep(2, 12), rep(3, 12), rep(4, 12), rep(5, 12), rep(6, 12))

predictions <- data.frame(x = x_vals)

# Use the predict function with your model and new data
# Note: You might need to adjust this part to fit your specific model and data structure
predictions$y <- predict(fit1b, newdata = list(x = x_vals))

g2 <- ggplot(dPsi_GM, aes(x = dose, y = y)) +
  geom_point() +  # Plot the original data points
  geom_smooth(data = predictions, aes(x = x, y = y), colour = "darkgreen") +  # Add the model curve
  theme_minimal()+
  ggtitle("Fitted Asymptotic Regression Model Against GM Substrate Data")

g2
```

```{r}
plot(fit1b, geno ~ resid(.), abline = 0)

# the residuals are mostly negative for NT and mostly positive for Tg giving strong evidence that a "genotype" effect should be included in the model
```

```{r}
plot(fit1b, pair ~ resid(.), abline = 0)

#There does not seem to be a pattern correlation of pair and the response as the residuals are both positive and negative for all pairs, so we'll apply pair as a random effect if possible
```

```{r, warning = FALSE}


fit2.nlsList <- nlsList(y ~ SSmicmen(dose, Vm, K)|substrate, data = dPsi)
fit2.nlme <- nlme(fit2.nlsList)


summary(fit2.nlme)

plot(fit2.nlme)
qqnorm( fit2.nlme, abline = c(0,1) )


```

```{r}

fit3.nlsList <- nlsList(y ~ SSmicmen(dose, Vm, K)|sub_geno, data = dPsi)

plot( fit3.nlsList, id = 0.05, adj = -1 ) 
qqnorm( fit3.nlsList, abline = c(0,1) )

summary(fit3.nlsList)



```

```{r}



## converting nlsList into nlme so we can add random effect later
## nlme output also indicates AIC/BIC values
fit3.nlme <- nlme(fit3.nlsList)
fit3.nlme <- update(fit3.nlme, fixed = list(Vm ~ geno), groups = ~pair, random = K~1)
summary(fit3.nlme)


```

```{r}


dPsi$pair <- as.factor(dPsi$pair)
## adding the random effect

fit3.nlme.withrandom <- update(fit3.nlme, fixed = list(Vm ~ geno), groups = ~pair, random = K~1) 

summary(fit3.nlme.withrandom)
anova(fit2.nlme, fit3.nlme) # comparing model with genotype and substrate levels or just substrate grouping



anova(fit3.nlme, fit3.nlme.withrandom)

## anova p-value and larger AIC/BIC values show that random is needed

plot(fit3.nlme, form = ~geno*substrate)
```

```{r}
plot(augPred(fit3.nlme, level = 0:1)) # Figure 8.11 + layout = c(5,1) 

layout(matrix(1:5, 5, 1, byrow = TRUE))

fit32 <- fit3.nlme


ap <- augPred(fit32)
plot(ap)
```

```{r}


# anova( fit3.nlme, fm2Indom.nlme ), page 284
```

### Answering the actual questions in the prompt

```{r}
## Figuring out genotype vs. not genotype fixed effect
# fit NLS model
nls_GM_geno <- nlsList(y ~ SSmicmen(dose, Vm, K)|geno, data = dPsi_GM)

# fit NLME (nonlinear mixed effects model)
fit_GM_geno <- nlme(nls_GM_geno)
fit_GM_geno <- update(fit_GM_geno, fixed = list(Vm ~ geno), groups = ~pair, random = (K~1|pair)) # Vm varies w/ geno | group by pair | K varies across levels of pair

summary(fit_GM_geno)

# reduced fit_GM_geno without genotype as fixed effect
fit_reduced <- nlme(nls_GM_geno, groups = ~pair, random = (K~1|pair), fixed = y ~ SSmicmen(dose, Vm, K))

summary(fit_reduced)

# model comparison using ANOVA
anova(fit_GM_geno, fit_reduced) 


#print(lrt)


```

-   based on ANOVA, `fit_GM_geno` is better because it has smaller AIC and BIC

### Trying to get Predicted out

```{r}
predicted_values <- predict(fit_GM_geno)

dPsi_GM$predicted_geno <- predicted_values

ggplot(dPsi_GM, aes(x = dose, 
                    color = geno)) + 
  geom_point(aes(y = y)) + 
  geom_line(aes(y = predicted_geno)) 
```

-   notes on graph: still seems a little bit like an overfit -\> the model is using more of a connect-the-dots approach

-   however, visually the difference between the two genotypes is pretty obvious, even though the model isn't the best fit

```{r}

#visualizing genotype with pair random effect

levels <- seq(2,6, by = 0.1)

#augmented_predictions <- augPred(fit_reduced, data = dPsi_GM)

## alternative to augPred
# Generate basic predictions
basic_predictions <- predict(fit_reduced, newdata = dPsi_GM)

# Manually merge or augment predictions as needed
dPsi_GM$predictions <- basic_predictions


# Extract model coefficients
coefficients <- fixef(fit_reduced)

# Generate predictions
dPsi_GM$predicted <- with(dPsi_GM, {
  Vm_estimate <- coefficients["Vm"]  # Extract Vm coefficient
  K_estimate <- coefficients["K"]    # Extract K coefficient
  predicted <- SSmicmen(dose, Vm_estimate, K_estimate)
  return(predicted)
})
```

```{r}
ggplot(dPsi_GM, aes(x = dose, y = y)) +
  geom_point() +
  geom_line(aes(y=predicted), color = "blue") +
  labs(x = "Dose", 
       y = "dPsi", 
       title = "Predicted vs. Observed Values", 
       subtitle = "For Model without Genotype") + 
  theme_minimal()
```

```{r}
# Extract coefficients from the model
coefficients <- fixef(fit_GM_geno)

# Define the function used for fitting the model
SSmicmen <- function(dose, Vm, K) {
  # Define the SSmicmen function using the extracted coefficients
  # This function should match the one used in your model fitting process
  Vm * dose / (K + dose)
}

# Define a function to make predictions
predict_SSmicmen <- function(dose_values, coefficients) {

  predictions <- SSmicmen(dose_values, coefficients["Vm"], coefficients["K"])
  return(predictions)
}

new_dose_values <- seq(min(dPsi_GM$dose), max(dPsi_GM$dose), length.out = 100)

# Make predictions
predicted_values <- predict_SSmicmen(new_dose_values, coefficients)

# Plot the predicted values
plot(dPsi_GM$dose, dPsi_GM$y, type = "p", col = "blue", xlab = "Dose", ylab = "Response")
lines(new_dose_values, predicted_values, col = "red")

```

```{r}
# Create a dataframe with new dose values
new_data <- data.frame(dose = new_dose_values)

genotype_values <- rep(c('Tg', 'NT'), length.out = length(new_dose_values))
new_data$geno <- genotype_values

# Make predictions for the new data
new_data$predicted <- predict(fit_GM_geno, newdata = new_data)

# Plot the predicted values
ggplot(dPsi_GM, aes(x = dose, y = y, color = geno)) +
  geom_point() +
  geom_line(data = new_data, aes(y = predicted)) +
  labs(x = "Dose", y = "Response", title = "Predicted vs. Observed Values") +
  scale_color_manual(values = c("blue", "red")) +  # Set colors for genotypes
  theme_minimal()
```

------------------------------------------------------------------------

### Graveyard

```{r}

## figuring out whether pair should be a fixed or random effect
nls_GM_geno <- nlsList(y ~ SSmicmen(dose, Vm, K)|geno, data = dPsi_GM)
fit_GM_without_pair <- nlme(nls_GM_geno)

coefficients(fit_GM_without_pair)

fit_GM_random <- nlme(nls_GM_geno)
fit_GM_random <- update(fit_GM_geno, fixed = list(Vm ~ geno), groups = ~pair, random = (K~1|pair)) 

summary(fit_GM_random)


fit_GM_fixed <- nlme(nls_GM_geno)
summary(fit_GM_fixed)
fit_GM_fixed <- update(fit_GM_fixed, fixed = list(Vm ~ geno, K ~ pair))

#write a R function to fit the model

```

```{r}
mm.pair <- function(d= dose, V, k, p = pair){
  num <- V*dose
  denom <- K[p] + dose
  return (num/denom)
}
```

```{r}
v.start
```
